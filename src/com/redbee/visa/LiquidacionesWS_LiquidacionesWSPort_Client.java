
package com.redbee.visa;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.security.GeneralSecurityException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;

import javax.xml.namespace.QName;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.net.ssl.KeyManager;
import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.TrustManager;
import javax.net.ssl.TrustManagerFactory;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

import org.apache.cxf.configuration.jsse.TLSClientParameters;
import org.apache.cxf.frontend.ClientProxy;
import org.apache.cxf.transport.http.HTTPConduit;

/**
 * This class was generated by Apache CXF 2.7.16
 * 2015-07-13T12:51:44.099-03:00
 * Generated source version: 2.7.16
 * 
 */
public final class LiquidacionesWS_LiquidacionesWSPort_Client {

    private static final QName SERVICE_NAME = new QName("http://erad.visa.com/", "LiquidacionWSServiceService");

    private LiquidacionesWS_LiquidacionesWSPort_Client() {
    }

    public static void main(String args[]) throws java.lang.Exception {
        //URL wsdlURL = LiquidacionWSServiceService.WSDL_LOCATION;
       // if (args.length > 0 && args[0] != null && !"".equals(args[0])) { 
    		//URL wsdlURL;
            //File wsdlFile = new File("/home/pcastelo/Downloads/wsdl.xml");
            URL wsdlURL = new URL("http://localhost:8080/resumenes/services/liquidacionWS?wsdl");
//            if (wsdlFile.exists()) {
//                wsdlURL = wsdlFile.toURI().toURL();
//            } else {
//                wsdlURL = new URL(args[0]);
//            }
      
        LiquidacionWSServiceService ss = new LiquidacionWSServiceService(wsdlURL, SERVICE_NAME);
        LiquidacionesWS port = ss.getLiquidacionesWSPort();  
        setupTLS(port);
        try {
        	 System.out.println("Invoking getLiquidacion...");
             java.lang.String _getLiquidacion_liquidacionID = "CRE-PPL05179278612015-04-09 00:00:00.0";
             com.redbee.visa.LiquidacionResponse _getLiquidacion__return = port.getLiquidacion(_getLiquidacion_liquidacionID);
             System.out.println("getLiquidacion.result=" + _getLiquidacion__return);

        } catch (Exception e) {
            System.out.println("Invocation failed with the following: " + e.getCause());
            System.out.println();
        }

        System.exit(0);
    }

    
    
    private static void setupTLS(LiquidacionesWS port) 
            throws FileNotFoundException, IOException, GeneralSecurityException {
            String keyStoreLoc = "src/config/clientKeystore.jks";
            HTTPConduit httpConduit = (HTTPConduit) ClientProxy.getClient(port).getConduit();
     
            TLSClientParameters tlsCP = new TLSClientParameters();
            String keyPassword = "ckpass";
            KeyStore keyStore = KeyStore.getInstance("JKS");
            keyStore.load(new FileInputStream(keyStoreLoc), "cspass".toCharArray());
            KeyManager[] myKeyManagers = getKeyManagers(keyStore, keyPassword);
            tlsCP.setKeyManagers(myKeyManagers);
     
            
            KeyStore trustStore = KeyStore.getInstance("JKS");
            trustStore.load(new FileInputStream(keyStoreLoc), "cspass".toCharArray());
            TrustManager[] myTrustStoreKeyManagers = getTrustManagers(trustStore);
            tlsCP.setTrustManagers(myTrustStoreKeyManagers);
            
            httpConduit.setTlsClientParameters(tlsCP);
        }

        private static TrustManager[] getTrustManagers(KeyStore trustStore) 
            throws NoSuchAlgorithmException, KeyStoreException {
            String alg = KeyManagerFactory.getDefaultAlgorithm();
            TrustManagerFactory fac = TrustManagerFactory.getInstance(alg);
            fac.init(trustStore);
            return fac.getTrustManagers();
        }
        
        private static KeyManager[] getKeyManagers(KeyStore keyStore, String keyPassword) 
            throws GeneralSecurityException, IOException {
            String alg = KeyManagerFactory.getDefaultAlgorithm();
            char[] keyPass = keyPassword != null
                         ? keyPassword.toCharArray()
                         : null;
            KeyManagerFactory fac = KeyManagerFactory.getInstance(alg);
            fac.init(keyStore, keyPass);
            return fac.getKeyManagers();
        }
}
